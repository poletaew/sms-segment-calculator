<?php

namespace Poletaew\SmsSegmentCalculator\Helpers;

use IntlChar;

/**
 * Created by Michael Poletaew <poletaew@gmail.com>
 * at 12:39, 21.05.2024 GMT+4
 *
 * In order to avoid confusion here is a list of terms
 * used throughout this code:
 * - octet: represents a byte or 8 bits
 * - septet: represents 7 bits
 * - character: a text unit, think one char is one glyph (Warning: this is an oversimplification and not always true)
 * - code point: a character value in a given encoding
 * - code unit: a single "block" used to encode a character
 *              UCS-2 is of fixed length and every character is 2 code units long
 *              GSM-7 is of variable length and requires 1 or 2 code units per character
 */
class UnicodeToGSMMapper extends AbstractMapper
{
    const MAP = [
        ['from' => 0x000a, 'to' => [0x0a]],
        ['from' => 0x000c, 'to' => [0x1b, 0x0a]],
        ['from' => 0x000d, 'to' => [0x0d]],
        ['from' => 0x0020, 'to' => [0x20]],
        ['from' => 0x0021, 'to' => [0x21]],
        ['from' => 0x0022, 'to' => [0x22]],
        ['from' => 0x0023, 'to' => [0x23]],
        ['from' => 0x0024, 'to' => [0x02]],
        ['from' => 0x0025, 'to' => [0x25]],
        ['from' => 0x0026, 'to' => [0x26]],
        ['from' => 0x0027, 'to' => [0x27]],
        ['from' => 0x0028, 'to' => [0x28]],
        ['from' => 0x0029, 'to' => [0x29]],
        ['from' => 0x002a, 'to' => [0x2a]],
        ['from' => 0x002b, 'to' => [0x2b]],
        ['from' => 0x002c, 'to' => [0x2c]],
        ['from' => 0x002d, 'to' => [0x2d]],
        ['from' => 0x002e, 'to' => [0x2e]],
        ['from' => 0x002f, 'to' => [0x2f]],
        ['from' => 0x0030, 'to' => [0x30]],
        ['from' => 0x0031, 'to' => [0x31]],
        ['from' => 0x0032, 'to' => [0x32]],
        ['from' => 0x0033, 'to' => [0x33]],
        ['from' => 0x0034, 'to' => [0x34]],
        ['from' => 0x0035, 'to' => [0x35]],
        ['from' => 0x0036, 'to' => [0x36]],
        ['from' => 0x0037, 'to' => [0x37]],
        ['from' => 0x0038, 'to' => [0x38]],
        ['from' => 0x0039, 'to' => [0x39]],
        ['from' => 0x003a, 'to' => [0x3a]],
        ['from' => 0x003b, 'to' => [0x3b]],
        ['from' => 0x003c, 'to' => [0x3c]],
        ['from' => 0x003d, 'to' => [0x3d]],
        ['from' => 0x003e, 'to' => [0x3e]],
        ['from' => 0x003f, 'to' => [0x3f]],
        ['from' => 0x0040, 'to' => [0x00]],
        ['from' => 0x0041, 'to' => [0x41]],
        ['from' => 0x0042, 'to' => [0x42]],
        ['from' => 0x0043, 'to' => [0x43]],
        ['from' => 0x0044, 'to' => [0x44]],
        ['from' => 0x0045, 'to' => [0x45]],
        ['from' => 0x0046, 'to' => [0x46]],
        ['from' => 0x0047, 'to' => [0x47]],
        ['from' => 0x0048, 'to' => [0x48]],
        ['from' => 0x0049, 'to' => [0x49]],
        ['from' => 0x004a, 'to' => [0x4a]],
        ['from' => 0x004b, 'to' => [0x4b]],
        ['from' => 0x004c, 'to' => [0x4c]],
        ['from' => 0x004d, 'to' => [0x4d]],
        ['from' => 0x004e, 'to' => [0x4e]],
        ['from' => 0x004f, 'to' => [0x4f]],
        ['from' => 0x0050, 'to' => [0x50]],
        ['from' => 0x0051, 'to' => [0x51]],
        ['from' => 0x0052, 'to' => [0x52]],
        ['from' => 0x0053, 'to' => [0x53]],
        ['from' => 0x0054, 'to' => [0x54]],
        ['from' => 0x0055, 'to' => [0x55]],
        ['from' => 0x0056, 'to' => [0x56]],
        ['from' => 0x0057, 'to' => [0x57]],
        ['from' => 0x0058, 'to' => [0x58]],
        ['from' => 0x0059, 'to' => [0x59]],
        ['from' => 0x005a, 'to' => [0x5a]],
        ['from' => 0x005b, 'to' => [0x1b, 0x3c]],
        ['from' => 0x005c, 'to' => [0x1b, 0x2f]],
        ['from' => 0x005d, 'to' => [0x1b, 0x3e]],
        ['from' => 0x005e, 'to' => [0x1b, 0x14]],
        ['from' => 0x005f, 'to' => [0x11]],
        ['from' => 0x0061, 'to' => [0x61]],
        ['from' => 0x0062, 'to' => [0x62]],
        ['from' => 0x0063, 'to' => [0x63]],
        ['from' => 0x0064, 'to' => [0x64]],
        ['from' => 0x0065, 'to' => [0x65]],
        ['from' => 0x0066, 'to' => [0x66]],
        ['from' => 0x0067, 'to' => [0x67]],
        ['from' => 0x0068, 'to' => [0x68]],
        ['from' => 0x0069, 'to' => [0x69]],
        ['from' => 0x006a, 'to' => [0x6a]],
        ['from' => 0x006b, 'to' => [0x6b]],
        ['from' => 0x006c, 'to' => [0x6c]],
        ['from' => 0x006d, 'to' => [0x6d]],
        ['from' => 0x006e, 'to' => [0x6e]],
        ['from' => 0x006f, 'to' => [0x6f]],
        ['from' => 0x0070, 'to' => [0x70]],
        ['from' => 0x0071, 'to' => [0x71]],
        ['from' => 0x0072, 'to' => [0x72]],
        ['from' => 0x0073, 'to' => [0x73]],
        ['from' => 0x0074, 'to' => [0x74]],
        ['from' => 0x0075, 'to' => [0x75]],
        ['from' => 0x0076, 'to' => [0x76]],
        ['from' => 0x0077, 'to' => [0x77]],
        ['from' => 0x0078, 'to' => [0x78]],
        ['from' => 0x0079, 'to' => [0x79]],
        ['from' => 0x007a, 'to' => [0x7a]],
        ['from' => 0x007b, 'to' => [0x1b, 0x28]],
        ['from' => 0x007c, 'to' => [0x1b, 0x40]],
        ['from' => 0x007d, 'to' => [0x1b, 0x29]],
        ['from' => 0x007e, 'to' => [0x1b, 0x3d]],
        ['from' => 0x00a1, 'to' => [0x40]],
        ['from' => 0x00a3, 'to' => [0x01]],
        ['from' => 0x00a4, 'to' => [0x24]],
        ['from' => 0x00a5, 'to' => [0x03]],
        ['from' => 0x00a7, 'to' => [0x5f]],
        ['from' => 0x00bf, 'to' => [0x60]],
        ['from' => 0x00c4, 'to' => [0x5b]],
        ['from' => 0x00c5, 'to' => [0x0e]],
        ['from' => 0x00c6, 'to' => [0x1c]],
        ['from' => 0x00c9, 'to' => [0x1f]],
        ['from' => 0x00d1, 'to' => [0x5d]],
        ['from' => 0x00d6, 'to' => [0x5c]],
        ['from' => 0x00d8, 'to' => [0x0b]],
        ['from' => 0x00dc, 'to' => [0x5e]],
        ['from' => 0x00df, 'to' => [0x1e]],
        ['from' => 0x00e0, 'to' => [0x7f]],
        ['from' => 0x00e4, 'to' => [0x7b]],
        ['from' => 0x00e5, 'to' => [0x0f]],
        ['from' => 0x00e6, 'to' => [0x1d]],
        ['from' => 0x00c7, 'to' => [0x09]],
        ['from' => 0x00e8, 'to' => [0x04]],
        ['from' => 0x00e9, 'to' => [0x05]],
        ['from' => 0x00ec, 'to' => [0x07]],
        ['from' => 0x00f1, 'to' => [0x7d]],
        ['from' => 0x00f2, 'to' => [0x08]],
        ['from' => 0x00f6, 'to' => [0x7c]],
        ['from' => 0x00f8, 'to' => [0x0c]],
        ['from' => 0x00f9, 'to' => [0x06]],
        ['from' => 0x00fc, 'to' => [0x7e]],
        ['from' => 0x0393, 'to' => [0x13]],
        ['from' => 0x0394, 'to' => [0x10]],
        ['from' => 0x0398, 'to' => [0x19]],
        ['from' => 0x039b, 'to' => [0x14]],
        ['from' => 0x039e, 'to' => [0x1a]],
        ['from' => 0x03a0, 'to' => [0x16]],
        ['from' => 0x03a3, 'to' => [0x18]],
        ['from' => 0x03a6, 'to' => [0x12]],
        ['from' => 0x03a8, 'to' => [0x17]],
        ['from' => 0x03a9, 'to' => [0x15]],
        ['from' => 0x20ac, 'to' => [0x1b, 0x65]],
    ];

    public static function getByChar(string $char): mixed
    {
        $ord = IntlChar::ord($char);
        return $ord ? self::get($ord) : null;
    }
}